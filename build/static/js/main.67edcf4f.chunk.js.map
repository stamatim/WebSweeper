{"version":3,"sources":["Cell.js","index.js"],"names":["Cell","value","this","props","isMine","isRevealed","neighbour","_this$props","onClick","className","isWin","isRunning","react_default","a","createElement","getValue","React","Component","array","squares","Board","state","boardData","_this","initBoardData","height","width","mines","gameStatus","_this2","data","createEmptyArray","updatedData","plantMines","i","j","mine","traverseBoard","x","y","map","isEmpty","push","randomx","randomy","minesPlanted","Math","floor","random","_this3","datarow","dataitem","key","length","Cell_Cell","handleCellClick","el","isFlagged","console","log","setState","revealAll","revealEmpty","revealAllWin","_this4","area","renderBoard","Game","_this5","_this$state","src_Board","ReactDOM","render","src_Game","document","getElementById"],"mappings":"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","file":"static/js/main.67edcf4f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Cell extends React.Component {\n  getValue() {\n    const { value } = this.props;\n\n\tif (value.isMine && value.isRevealed) {\n      return \"ðŸ’£\";\n    }\n\n    if (value.neighbour === 0) {\n      return null;\n    }\n    if (value.isRevealed)\n\t{\n\t\treturn value.neighbour;\n\t}\n  }\n\n  render() {\n    const { value, onClick} = this.props;\n    let className = (value.isRevealed ? \"cell\" : \"hidden\")\n\tif (value.isWin === true)\n\t\tclassName = \"win\"\n\tif (value.isRunning === false)\n\t\tclassName = \"fine\"\n    return (\n      <div\n        onClick={onClick}\n        className={className}\n      >\n        {this.getValue()}\n      </div>\n    );\n  }\n}\n\nconst cellItemShape = {\n    isRevealed: PropTypes.bool,\n    isMine: PropTypes.bool,\n    isFlagged: PropTypes.bool,\n\tisRunning: PropTypes.bool,\n\tisWin: PropTypes.bool\n}\n\nCell.propTypes = {\n  value: PropTypes.objectOf(PropTypes.shape(cellItemShape)),\n  onClick: PropTypes.func,\n}\n","import React from 'react';\nimport './index.css';\nimport ReactDOM from 'react-dom';\nimport Cell from './Cell';\nimport ServerApi from './ServerApi'; // import the server api class\n\nlet array = [0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1]\nlet x = 0; \nlet squares = 64;\n\n\nexport default class Board extends React.Component {\n  state = {\n    boardData: this.initBoardData(this.props.height, this.props.width, this.props.mines),\n    gameStatus: \"Minesweeper\",\n  };\n  // Gets initial board data\n  initBoardData(height, width, mines) {\n    let data = this.createEmptyArray(height, width);\n\tdata = this.plantMines(data, height, width, mines);\n\tlet updatedData = data;\n\tfor (let i = 0; i < height; i++)\n\t{\n      for (let j = 0; j < width; j++)\n\t  {\n        if (data[i][j].isMine !== true)\n\t\t{\n          let mine = 0;\n\t\t  let adjSquares = this.traverseBoard(data[i][j].x, data[i][j].y, data);\n\t\t  adjSquares.map(value => {\n            if (value.isMine) {\n              mine++;\n            }\n          });\n\t\t  if (mine === 0) \n\t\t  {\n            updatedData[i][j].isEmpty = true;\n          }\n\t\t  updatedData[i][j].neighbour = mine;\n\t\t}\n\t  }\n\t}\n\tdata = updatedData;\n    return data;\n  }\n\n  createEmptyArray(height, width) {\n    let data = [];\n\n    for (let i = 0; i < height; i++) {\n      data.push([]);\n      for (let j = 0; j < width; j++) {\n        data[i][j] = {\n          x: i,\n          y: j,\n          neighbour: 0,\n        };\n      }\n    }\n    return data;\n  }\n  plantMines(data, height, width, mines) {\n    let randomx, randomy, minesPlanted = 0;\n    while (minesPlanted < mines) {\n      randomx = Math.floor(Math.random() * width);\n      randomy = Math.floor(Math.random() * height);\n      if (!(data[randomx][randomy].isMine)) {\n        data[randomx][randomy].isMine = true;\n        minesPlanted++;\n      }\n    }\n    return (data);\n  }\n  renderBoard(data) {\n    return data.map((datarow) => {\n      return datarow.map((dataitem) => {\n        return (\n          <div key={dataitem.x * datarow.length + dataitem.y}>\n            <div> <Cell onClick={() => this.handleCellClick(dataitem.x, dataitem.y)} value={dataitem}/></div>\n            {(datarow[datarow.length - 1] === dataitem) ? <div className=\"clear\" /> : \"\"}\n          </div>);\n      })\n    });\n\n  }\n  \n  traverseBoard(x, y, data) {\n    const el = [];\n\n    //up\n    if (x > 0) {\n      el.push(data[x - 1][y]);\n    }\n\n    //down\n    if (x < this.props.height - 1) {\n      el.push(data[x + 1][y]);\n    }\n\n    //left\n    if (y > 0) {\n      el.push(data[x][y - 1]);\n    }\n\n    //right\n    if (y < this.props.width - 1) {\n      el.push(data[x][y + 1]);\n    }\n\n    // top left\n    if (x > 0 && y > 0) {\n      el.push(data[x - 1][y - 1]);\n    }\n\n    // top right\n    if (x > 0 && y < this.props.width - 1) {\n      el.push(data[x - 1][y + 1]);\n    }\n\n    // bottom right\n    if (x < this.props.height - 1 && y < this.props.width - 1) {\n      el.push(data[x + 1][y + 1]);\n    }\n\n    // bottom left\n    if (x < this.props.height - 1 && y > 0) {\n      el.push(data[x + 1][y - 1]);\n    }\n\n    return el;\n  }\n  \n  handleCellClick(x, y) {\n\n    if (this.state.boardData[x][y].isRevealed || this.state.boardData[x][y].isFlagged) return null;\n    let updatedData = this.state.boardData;\n    updatedData[x][y].isRevealed = true;\n\tsquares = squares - 1;\n\tconsole.log(squares);\n\t\n\tif (this.state.boardData[x][y].isMine) {\n      this.setState({ gameStatus: \"You Lost.\" });\n\t  updatedData = this.revealAll(x, y, updatedData);\n    }\n\t\n\tif (updatedData[x][y].isEmpty) {\n      updatedData = this.revealEmpty(x, y, updatedData);\n\t  \n\tif (squares == this.props.mines)\n\t{\n\t\tthis.setState({ gameStatus: \"You Win.\" });\n\t\tupdatedData = this.revealAllWin(x, y, updatedData);\n\t}\n    }\n    this.setState({\n      boardData: updatedData,\n    });\n  }\n\n\trevealEmpty(x, y, data) {\n\t\n    let area = this.traverseBoard(x, y, data);\n    area.map(value => {\n      if (!value.isRevealed && (value.isEmpty || !value.isMine)) {\n        data[value.x][value.y].isRevealed = true;\n\t\tsquares = squares - 1;\n\t\tconsole.log(squares);\n        if (value.isEmpty) {\n          this.revealEmpty(value.x, value.y, data);\n\t\t  \n        }\n      }\n    });\n    return data;\n\t\n\n  }\n  \n  revealAll(x, y, data) {\n    let area = this.state.boardData\n    area.map((datarow) => {\n\t\tdatarow.map((dataitem) => {\n\t\t\tdataitem.isRevealed = true;\n\t\t});\n\t});\n\tarea.map((datarow) => {\n\t\tdatarow.map((dataitem) => {\n\t\t\tdataitem.isRunning = false;\n\t\t});\n\t});\n    return area;\n}\n\n  revealAllWin(x, y, data) {\n    let area = this.state.boardData\n    area.map((datarow) => {\n\t\tdatarow.map((dataitem) => {\n\t\t\tdataitem.isRevealed = true;\n\t\t});\n\t});\n\tarea.map((datarow) => {\n\t\tdatarow.map((dataitem) => {\n\t\t\tdataitem.isWin = true;\n\t\t});\n\t});\n    return area;\n}\n  \n  render() {\n\tif (array[x] === 1)\n\t{\n    return (\n      <div className=\"board\">\n        <div className=\"game-info\">\n          <h1 className=\"info\">{this.state.gameStatus}</h1>\n        </div>\n        {\n          this.renderBoard(this.state.boardData)\n\t\t  \n        }\n      </div>\n    );\n\t}\n\tif (array[x] === 0)\n\t{\n    return (\n      <div className=\"board\">\n        <div className=\"game-info\">\n          <h1 className=\"info\">{this.state.gameStatus}</h1>\n        </div>\n        {\n          this.renderBoard(this.state.boardData)\n        }\n      </div>\n\t  \n    );\n\t}\n  }\n}\n\nclass Game extends React.Component {\n\t\n\t\n  state = {\n    height: 8,\n    width: 8,\n\tmines: 10,\n\tsquares: this.props.height * this.props.width,\n  };\n\n  \n  \n  render() {\n    const {height, width, mines, gameStatus} = this.state;\n    return (\n      <div className=\"game\">\n        <Board height={height} width={width} mines ={mines} />\n      </div>\n    );\n  }\n  \n  \n \n\n  \n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}